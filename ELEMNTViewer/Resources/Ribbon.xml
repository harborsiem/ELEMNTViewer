<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ribbon</name>
    </assembly>
    <members>
        <member name="T:RibbonLib.Controls.Events.ExecuteEventArgs">
            <summary>
            Definition for execute events arguments
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Events.ExecuteEventArgs.#ctor(RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Initializes a new instance of the ExecuteEventArgs
            </summary>
            <param name="key"></param>
            <param name="currentValue"></param>
            <param name="commandExecutionProperties"></param>
        </member>
        <member name="P:RibbonLib.Controls.Events.ExecuteEventArgs.Key">
            <summary>
            Get the key
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Events.ExecuteEventArgs.CurrentValue">
            <summary>
            Get the current value
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Events.ExecuteEventArgs.CommandExecutionProperties">
            <summary>
            Get the Command Execution Properties
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Events.BaseEventsProvider">
            <summary>
            Base class for all events provider classes.
            provides common members like: SupportedEvents.
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.Events.BaseEventsProvider._supportedEvents">
            <summary>
            list of supported events
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Events.BaseEventsProvider.#ctor">
            <summary>
            Initializes a new instance of the BaseEventsProvider
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Events.BaseEventsProvider.SupportedEvents">
            <summary>
            Get supported "execution verbs", or events
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Events.BaseEventsProvider.Execute(RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Handles IUICommandHandler.Execute function for supported events
            </summary>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="T:RibbonLib.Controls.Events.IPreviewEventsProvider">
            <summary>
            Definition for Preview and CancelPreview events provider
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Events.IPreviewEventsProvider.PreviewEvent">
            <summary>
            Preview event
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Events.IPreviewEventsProvider.CancelPreviewEvent">
            <summary>
            Cancel Preview event
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Events.PreviewEventsProvider">
            <summary>
            Implementation of IPreviewEventsProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Events.PreviewEventsProvider.Execute(RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Handles IUICommandHandler.Execute function for supported events
            </summary>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="E:RibbonLib.Controls.Events.PreviewEventsProvider.PreviewEvent">
            <summary>
            Preview event
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Events.PreviewEventsProvider.CancelPreviewEvent">
            <summary>
            Cancel Preview event
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Events.IExecuteEventsProvider">
            <summary>
            Definition for Execute events provider
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Events.IExecuteEventsProvider.ExecuteEvent">
            <summary>
            Execute event
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Events.ExecuteEventsProvider">
            <summary>
            Implementation of IExecuteEventsProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Events.ExecuteEventsProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ExecuteEventsProvider
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RibbonLib.Controls.Events.ExecuteEventsProvider.Execute(RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Handles IUICommandHandler.Execute function for supported events
            </summary>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="E:RibbonLib.Controls.Events.ExecuteEventsProvider.ExecuteEvent">
            <summary>
            Execute event
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Events.IEventsProvider">
            <summary>
            Interface for components that provides events
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Events.IEventsProvider.SupportedEvents">
            <summary>
            Get supported "execution verbs", or events
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Events.IEventsProvider.Execute(RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Handles IUICommandHandler.Execute function for supported events
            </summary>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IRecentItemsPropertiesProvider">
            <summary>
            Definition for recent items properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IRecentItemsPropertiesProvider.RecentItems">
            <summary>
            Recent items property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.RecentItemsPropertiesProvider">
            <summary>
            Implementation of IRecentItemsPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.RecentItemsPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            RecentItemsPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.RecentItemsPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.RecentItemsPropertiesProvider.RecentItems">
            <summary>
            Recent items property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.BasePropertiesProvider">
            <summary>
            Base class for all properties provider classes.
            provides common members like: _ribbon, _command_id 
            and _supportedProperties.
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.Properties.BasePropertiesProvider._ribbon">
            <summary>
            reference for parent ribbon class
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.Properties.BasePropertiesProvider._commandID">
            <summary>
            ribbon control command id
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.Properties.BasePropertiesProvider._supportedProperties">
            <summary>
            list of supported properties
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.BasePropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            BasePropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandID">command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.Properties.BasePropertiesProvider.SupportedProperties">
            <summary>
            Get supported properties
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.BasePropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IBooleanValuePropertyProvider">
            <summary>
            Definition for boolean value properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IBooleanValuePropertyProvider.BooleanValue">
            <summary>
            Boolean value property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.BooleanValuePropertyProvider">
            <summary>
            Implementation of IBooleanValuePropertyProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.BooleanValuePropertyProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            BooleanValuePropertyProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.BooleanValuePropertyProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.BooleanValuePropertyProvider.BooleanValue">
            <summary>
            Boolean value property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider">
            <summary>
            Definition for color picker properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.AutomaticColorLabel">
            <summary>
            Automatic color label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.Color">
            <summary>
            Color property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.ColorType">
            <summary>
            Color type property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.MoreColorsLabel">
            <summary>
            More colors label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.NoColorLabel">
            <summary>
            No color label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.RecentColorsCategoryLabel">
            <summary>
            Recent colors category label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.StandardColors">
            <summary>
            Standard colors property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.StandardColorsCategoryLabel">
            <summary>
            Standard colors category label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.StandardColorsTooltips">
            <summary>
            Standard colors tooltips property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.ThemeColors">
            <summary>
            Theme colors property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.ThemeColorsCategoryLabel">
            <summary>
            Theme colors category label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IColorPickerPropertiesProvider.ThemeColorsTooltips">
            <summary>
            Theme colors tooltips property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider">
            <summary>
            Implementation of IColorPickerPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            ColorPickerPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.AutomaticColorLabel">
            <summary>
            Automatic color label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.Color">
            <summary>
            Color property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.ColorType">
            <summary>
            Color type property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.MoreColorsLabel">
            <summary>
            More colors label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.NoColorLabel">
            <summary>
            No color label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.RecentColorsCategoryLabel">
            <summary>
            Recent colors category label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.StandardColors">
            <summary>
            Standard colors property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.StandardColorsCategoryLabel">
            <summary>
            Standard colors category label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.StandardColorsTooltips">
            <summary>
            Standard colors tooltips property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.ThemeColors">
            <summary>
            Theme colors property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.ThemeColorsCategoryLabel">
            <summary>
            Theme colors category label property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ColorPickerPropertiesProvider.ThemeColorsTooltips">
            <summary>
            Theme colors tooltips property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IContextAvailablePropertiesProvider">
            <summary>
            Definition for context available properties interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IContextAvailablePropertiesProvider.ContextAvailable">
            <summary>
            Context available property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.ContextAvailablePropertiesProvider">
            <summary>
            Implementation of IContextAvailablePropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.ContextAvailablePropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            ContextAvailablePropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.ContextAvailablePropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ContextAvailablePropertiesProvider.ContextAvailable">
            <summary>
            Context available property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IEnabledPropertiesProvider">
            <summary>
            Definition for enabled properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IEnabledPropertiesProvider.Enabled">
            <summary>
            Enabled property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.EnabledPropertiesProvider">
            <summary>
            Implementation of IEnabledPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.EnabledPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            EnabledPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.EnabledPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.EnabledPropertiesProvider.Enabled">
            <summary>
            Enabled property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IFontControlPropertiesProvider">
            <summary>
            Definition for font control properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.Family">
            <summary>
            Family property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.Size">
            <summary>
            Size property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.Bold">
            <summary>
            Bold property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.Italic">
            <summary>
            Italic property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.Underline">
            <summary>
            Underline property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.Strikethrough">
            <summary>
            Strikethrough property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.ForegroundColor">
            <summary>
            Foreground color property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.BackgroundColor">
            <summary>
            Background color property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IFontControlPropertiesProvider.VerticalPositioning">
            <summary>
            Vertical positioning property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.FontControlPropertiesProvider">
            <summary>
            Implementation of IFontControlPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.FontControlPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            FontControlPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.FontControlPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.FontProperties">
            <summary>
            Font properties property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.Family">
            <summary>
            Family property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.Size">
            <summary>
            Size property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.Bold">
            <summary>
            Bold property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.Italic">
            <summary>
            Italic property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.Underline">
            <summary>
            Underline property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.Strikethrough">
            <summary>
            Strikethrough property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.ForegroundColor">
            <summary>
            Foreground color property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.BackgroundColor">
            <summary>
            Background color property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.FontControlPropertiesProvider.VerticalPositioning">
            <summary>
            Vertical positioning property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IGalleryPropertiesProvider">
            <summary>
            Definition for gallery properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IGalleryPropertiesProvider.Categories">
            <summary>
            Categories property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IGalleryPropertiesProvider.ItemsSource">
            <summary>
            Items source property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IGalleryPropertiesProvider.SelectedItem">
            <summary>
            Selected item property
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Properties.IGalleryPropertiesProvider.CategoriesReady">
            <summary>
            Called when the Categories property is ready to be initialized
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Properties.IGalleryPropertiesProvider.ItemsSourceReady">
            <summary>
            Called when the ItemsSource property is ready to be initialized
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.GalleryPropertiesProvider">
            <summary>
            Implementation of IGalleryPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.GalleryPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32,System.Object)">
            <summary>
            GalleryPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
            <param name="sender">ribbon control that instantiate the provider</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.GalleryPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.GalleryPropertiesProvider.Categories">
            <summary>
            Categories property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.GalleryPropertiesProvider.ItemsSource">
            <summary>
            Items source property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.GalleryPropertiesProvider.SelectedItem">
            <summary>
            Selected item property
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Properties.GalleryPropertiesProvider.CategoriesReady">
            <summary>
            Called when the Categories property is ready to be initialized
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.Properties.GalleryPropertiesProvider.ItemsSourceReady">
            <summary>
            Called when the ItemsSource property is ready to be initialized
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IImagePropertiesProvider">
            <summary>
            Definition for image properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IImagePropertiesProvider.LargeImage">
            <summary>
            Large image property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IImagePropertiesProvider.SmallImage">
            <summary>
            Small image property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IImagePropertiesProvider.LargeHighContrastImage">
            <summary>
            Large high contrast image property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IImagePropertiesProvider.SmallHighContrastImage">
            <summary>
            Small high contrast image property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.ImagePropertiesProvider">
            <summary>
            Implementation of IImagePropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.ImagePropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            ImagePropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.ImagePropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ImagePropertiesProvider.LargeImage">
            <summary>
            Large image property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ImagePropertiesProvider.SmallImage">
            <summary>
            Small image property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ImagePropertiesProvider.LargeHighContrastImage">
            <summary>
            Large high contrast image property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ImagePropertiesProvider.SmallHighContrastImage">
            <summary>
            Small high contrast image property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IKeytipPropertiesProvider">
            <summary>
            Definition for keytip properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IKeytipPropertiesProvider.Keytip">
            <summary>
            Keytip property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.KeytipPropertiesProvider">
            <summary>
            Implementation of IKeytipPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.KeytipPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            KeytipPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.KeytipPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.KeytipPropertiesProvider.Keytip">
            <summary>
            Keytip property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.ILabelDescriptionPropertiesProvider">
            <summary>
            Definition for label description properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ILabelDescriptionPropertiesProvider.LabelDescription">
            <summary>
            LabelDescription property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.LabelDescriptionPropertiesProvider">
            <summary>
            Implementation of ILabelDescriptionPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.LabelDescriptionPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            LabelDescriptionPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.LabelDescriptionPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.LabelDescriptionPropertiesProvider.LabelDescription">
            <summary>
            Label description property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.ILabelPropertiesProvider">
            <summary>
            Definition for label properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ILabelPropertiesProvider.Label">
            <summary>
            Label property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.LabelPropertiesProvider">
            <summary>
            Implementation of ILabelPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.LabelPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            LabelPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.LabelPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.LabelPropertiesProvider.Label">
            <summary>
            Label property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IRepresentativeStringPropertiesProvider">
            <summary>
            Definition for representative string properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IRepresentativeStringPropertiesProvider.RepresentativeString">
            <summary>
            Representative string property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.RepresentativeStringPropertiesProvider">
            <summary>
            Implementation of IRepresentativeStringPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.RepresentativeStringPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            RepresentativeStringPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.RepresentativeStringPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.RepresentativeStringPropertiesProvider.RepresentativeString">
            <summary>
            Representative string property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.ISpinnerPropertiesProvider">
            <summary>
            Definition for spinner properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ISpinnerPropertiesProvider.DecimalValue">
            <summary>
            Decimal value property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ISpinnerPropertiesProvider.Increment">
            <summary>
            Increment property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ISpinnerPropertiesProvider.MaxValue">
            <summary>
            Max value property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ISpinnerPropertiesProvider.MinValue">
            <summary>
            Min value property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ISpinnerPropertiesProvider.DecimalPlaces">
            <summary>
            Decimal places property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ISpinnerPropertiesProvider.FormatString">
            <summary>
            Format string property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.SpinnerPropertiesProvider">
            <summary>
            Implementation of ISpinnerPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            SpinnerPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.DecimalValue">
            <summary>
            Decimal value property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.Increment">
            <summary>
            Increment property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.MaxValue">
            <summary>
            Max value property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.MinValue">
            <summary>
            Min value property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.DecimalPlaces">
            <summary>
            Decimal places property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.SpinnerPropertiesProvider.FormatString">
            <summary>
            Format string property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IStringValuePropertiesProvider">
            <summary>
            Definition for string value properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IStringValuePropertiesProvider.StringValue">
            <summary>
            String value property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.StringValuePropertiesProvider">
            <summary>
            Implementation of IStringValuePropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.StringValuePropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            StringValuePropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.StringValuePropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.StringValuePropertiesProvider.StringValue">
            <summary>
            String value property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.ITooltipPropertiesProvider">
            <summary>
            Definition for tooltip properties provider interface
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ITooltipPropertiesProvider.TooltipTitle">
            <summary>
            Tooltip title property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.ITooltipPropertiesProvider.TooltipDescription">
            <summary>
            Tooltip description property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.TooltipPropertiesProvider">
            <summary>
            Implementation of ITooltipPropertiesProvider
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.TooltipPropertiesProvider.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            TooltipPropertiesProvider ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandId">ribbon control command id</param>
        </member>
        <member name="M:RibbonLib.Controls.Properties.TooltipPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.Properties.TooltipPropertiesProvider.TooltipTitle">
            <summary>
            Tooltip title property
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.TooltipPropertiesProvider.TooltipDescription">
            <summary>
            Tooltip description property
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.Properties.IPropertiesProvider">
            <summary>
            Interface for components that provides properties
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.Properties.IPropertiesProvider.SupportedProperties">
            <summary>
            Get supported properties
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.Properties.IPropertiesProvider.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for the supported properties
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="T:RibbonLib.Controls.RibbonApplicationMenu">
            <summary>
            Helper class that wraps a ribbon application menu control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonApplicationMenu.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Constructor for the Ribbon ApplicationMenu
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonApplicationMenu.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonApplicationMenu.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonCheckBox">
            <summary>
            Helper class that wraps a ribbon checkbox control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonCheckBox.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon CheckBox
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.BooleanValue">
            <summary>
            Get or set the Checked state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.LabelDescription">
            <summary>
            A longer description of the command. This description is only used when the command is used in the right side of the application menu
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonCheckBox.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonCheckBox.ExecuteEvent">
            <summary>
            Event provider similar to a "Check Changed" event.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonDropDownButton">
            <summary>
            Helper class that wraps a ribbon drop down button control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonDropDownButton.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon DropDownButton
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.LabelDescription">
            <summary>
            A longer description of the command. This description is only used when the command is used in the right side of the application menu
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownButton.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonDropDownColorPicker">
            <summary>
            Helper class that wraps a ribbon drop down color picker control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonDropDownColorPicker.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon DropDownColorPicker
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.AutomaticColorLabel">
            <summary>
            Defines the label for the "Automatic" color button.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.Color">
            <summary>
            The selected color.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.ColorType">
            <summary>
            The type of selected color.
            Can be: NoColor, Automatic or RGB (meaning specific color).
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.MoreColorsLabel">
            <summary>
            Defines the label for the "More colors..." button.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.NoColorLabel">
            <summary>
            Defines the label for the "No color" button.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.RecentColorsCategoryLabel">
            <summary>
            Defines the label for the "Recent colors" category.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.StandardColors">
            <summary>
            Defines the colors for the "Standard colors".
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.StandardColorsCategoryLabel">
            <summary>
            Defines the label for the "Standard colors" category.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.StandardColorsTooltips">
            <summary>
            Defines the tooltips for the "Standard colors".
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.ThemeColors">
            <summary>
            Defines the colors for the "Theme colors".
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.ThemeColorsCategoryLabel">
            <summary>
            Defines the label for the "Theme colors" category.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.ThemeColorsTooltips">
            <summary>
            Defines the tooltips for the "Theme colors".
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownColorPicker.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownColorPicker.ExecuteEvent">
            <summary>
            Event provider similar to a "Selected Changed" event.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownColorPicker.PreviewEvent">
            <summary>
            Event provider for a preview.
            This is when the mouse enters the control.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownColorPicker.CancelPreviewEvent">
            <summary>
            Event provider when the preview is cancelled.
            This is when the mouse leaves the control.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonFontControl">
            <summary>
            Helper class that wraps a ribbon font control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonFontControl.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon FontControl
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Family">
            <summary>
            The selected font family name.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Size">
            <summary>
            The size of the font.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Bold">
            <summary>
            Flag that indicates whether bold is selected.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Italic">
            <summary>
            Flag that indicates whether italic is selected.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Underline">
            <summary>
            Flag that indicates whether underline is selected.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Strikethrough">
            <summary>
            Flag that indicates whether strikethrough is selected
            (sometimes called Strikeout).
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.ForegroundColor">
            <summary>
            Contains the text color if ForegroundColorType is set to RGB.
            The FontControl helper class expose this property as a .NET Color
            and handles internally the conversion to and from COLORREF structure.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.BackgroundColor">
            <summary>
            Contains the background color if BackgroundColorType is set to RGB.
            The FontControl helper class expose this property as a .NET Color
            and handles internally the conversion to and from COLORREF structure.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.VerticalPositioning">
            <summary>
            Flag that indicates which one of the Subscript
            and Superscript buttons are selected, if any.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonFontControl.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonFontControl.ExecuteEvent">
            <summary>
            Event provider similar to a "Selected Changed" event.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonFontControl.PreviewEvent">
            <summary>
            Event provider for a preview.
            This is when the mouse enters the control.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonFontControl.CancelPreviewEvent">
            <summary>
            Event provider when the preview is cancelled.
            This is when the mouse leaves the control.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonHelpButton">
            <summary>
            Helper class that wraps a ribbon help button control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonHelpButton.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon HelpButton
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonHelpButton.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonHelpButton.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonHelpButton.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonHelpButton.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonHelpButton.ExecuteEvent">
            <summary>
            Event provider similar to a Click event.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonMenuGroup">
            <summary>
            Helper class that wraps a ribbon menu group control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonMenuGroup.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon MenuGroup
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonMenuGroup.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonMenuGroup.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonMenuGroup.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonMenuGroup.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonMenuGroup.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.BaseRibbonControl">
            <summary>
            Base class for all ribbon control helper classes, provides 
            common functionality for ribbon controls.
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.BaseRibbonControl._ribbon">
            <summary>
            reference for parent ribbon class
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.BaseRibbonControl._commandID">
            <summary>
            ribbon control command id
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.BaseRibbonControl._mapProperties">
            <summary>
            map of registered properties for this ribbon control
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.BaseRibbonControl._mapEvents">
            <summary>
            map of registered events for this ribbon control
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.BaseRibbonControl.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            BaseRibbonControl ctor
            </summary>
            <param name="ribbon">parent ribbon</param>
            <param name="commandID">command id attached to this control</param>
        </member>
        <member name="M:RibbonLib.Controls.BaseRibbonControl.AddPropertiesProvider(RibbonLib.Controls.Properties.IPropertiesProvider)">
            <summary>
            Register a properties provider with this ribbon control
            </summary>
            <param name="propertiesProvider">properties provider</param>
        </member>
        <member name="M:RibbonLib.Controls.BaseRibbonControl.AddEventsProvider(RibbonLib.Controls.Events.IEventsProvider)">
            <summary>
            Register an events provider with this ribbon control
            </summary>
            <param name="eventsProvider">events provider</param>
        </member>
        <member name="P:RibbonLib.Controls.BaseRibbonControl.CommandID">
            <summary>
            The Command Id, member of IRibbonControl
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.BaseRibbonControl.Execute(RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Handles IUICommandHandler.Execute function for this ribbon control
            </summary>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="M:RibbonLib.Controls.BaseRibbonControl.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for this ribbon control
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RibbonLib.Controls.BaseRibbonControl.Tag">
            <summary>
            Gets or sets the object that contains data about the control
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.BaseRibbonControl.CommandType">
            <summary>
            The CommandType of the Control
            If the CommandType is CommandType.Unknown then the Control is not initialized by the Framework
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonButton">
            <summary>
            Helper class that wraps a ribbon button control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonButton.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon Button
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.LabelDescription">
            <summary>
            A longer description of the command. This description is only used when the command is used in the right side of the application menu
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonButton.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonButton.ExecuteEvent">
            <summary>
            Event provider similar to a Click event.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonQuickAccessToolbar">
            <summary>
            Helper class that wraps the ribbon quick access toolbar.
            </summary>
        </member>
        <member name="F:RibbonLib.Controls.RibbonQuickAccessToolbar._customizeButton">
            <summary>
            handler for the customize button
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonQuickAccessToolbar.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon QuickAccessToolbar (QAT)
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="M:RibbonLib.Controls.RibbonQuickAccessToolbar.#ctor(RibbonLib.Ribbon,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon QuickAccessToolbar (QAT)
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
            <param name="customizeCommandId">Customize Command id attached to this control</param>
        </member>
        <member name="M:RibbonLib.Controls.RibbonQuickAccessToolbar.Execute(RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonQuickAccessToolbar.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonQuickAccessToolbar.ItemsSource">
            <summary>
            Items source property
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonQuickAccessToolbar.ExecuteEvent">
            <summary>
            The customizeButton Click event
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonRecentItems">
            <summary>
            Helper class that wraps a ribbon recent items.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonRecentItems.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon RecentItems
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonRecentItems.RecentItems">
            <summary>
            This property contains the list of the recent items.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonRecentItems.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonRecentItems.ExecuteEvent">
            <summary>
            Event provider similar to a Click event.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonSplitButton">
            <summary>
            Helper class that wraps a ribbon split button control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonSplitButton.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon SplitButton
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButton.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButton.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButton.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButton.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonTabGroup">
            <summary>
            Helper class that wraps a ribbon tab group control (ContextualTab).
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonTabGroup.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon TabGroup (ContextualTab).
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTabGroup.ContextAvailable">
            <summary>
            Get or set the status of the context.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTabGroup.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTabGroup.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTabGroup.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTabGroup.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonToggleButton">
            <summary>
            Helper class that wraps a ribbon toggle button control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonToggleButton.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon ToggleButton
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.BooleanValue">
            <summary>
            Set or get the Checked state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.Enabled">
            <summary>
            Set or get the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.LabelDescription">
            <summary>
            A longer description of the command. This description is only used when the command is used in the right side of the application menu
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonToggleButton.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonToggleButton.ExecuteEvent">
            <summary>
            Event provider similar to a "Check Changed" event.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonDropDownGallery">
            <summary>
            Helper class that wraps a ribbon drop down gallery control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonDropDownGallery.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon DropDownGallery
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.Categories">
            <summary>
            The list of categories. 
            Also exposed as an IUICollection of IUISimplePropertySet elements
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.ItemsSource">
            <summary>
            The list of DropDownGallery items.
            It is exposed as an IUICollection where every element
            in the collection is of type: IUISimplePropertySet
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.SelectedItem">
            <summary>
            The index of the selected item in the DropDownGallery.
            If nothing is selected returns UI_Collection_InvalidIndex,
            which is a fancy way to say -1
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownGallery.CategoriesReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the Categories
            Now one can work with the Categories.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownGallery.ItemsSourceReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the ItemsSource
            Now one can work with the ItemsSource.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonDropDownGallery.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownGallery.ExecuteEvent">
            <summary>
            Event provider similar to a "Selected Changed" event.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownGallery.PreviewEvent">
            <summary>
            Event provider for a preview.
            This is when the mouse enters the control.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonDropDownGallery.CancelPreviewEvent">
            <summary>
            Event provider when the preview is cancelled.
            This is when the mouse leaves the control.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonGroup">
            <summary>
            Helper class that wraps a ribbon group control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonGroup.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon Group
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonGroup.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonInRibbonGallery">
            <summary>
            Helper class that wraps a ribbon in-ribbon gallery control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonInRibbonGallery.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon InRibbonGallery
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.Categories">
            <summary>
            The list of categories. 
            Also exposed as an IUICollection of IUISimplePropertySet elements
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.ItemsSource">
            <summary>
            The list of InRibbonGallery items.
            It is exposed as an IUICollection where every element
            in the collection is of type: IUISimplePropertySet
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.SelectedItem">
            <summary>
            The index of the selected item in the InRibbonGallery.
            If nothing is selected returns UI_Collection_InvalidIndex,
            which is a fancy way to say -1
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonInRibbonGallery.CategoriesReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the Categories
            Now one can work with the Categories.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonInRibbonGallery.ItemsSourceReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the ItemsSource
            Now one can work with the ItemsSource.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonInRibbonGallery.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonInRibbonGallery.ExecuteEvent">
            <summary>
            Event provider similar to a "Selected Changed" event.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonInRibbonGallery.PreviewEvent">
            <summary>
            Event provider for a preview.
            This is when the mouse enters the control.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonInRibbonGallery.CancelPreviewEvent">
            <summary>
            Event provider when the preview is cancelled.
            This is when the mouse leaves the control.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonSplitButtonGallery">
            <summary>
            Helper class that wraps a ribbon split button gallery control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonSplitButtonGallery.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon SplitButtonGallery
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.BooleanValue">
            <summary>
            Get or set the Checked state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.Categories">
            <summary>
            The list of categories. 
            Also exposed as an IUICollection of IUISimplePropertySet elements
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.ItemsSource">
            <summary>
            The list of SplitButtonGallery items.
            It is exposed as an IUICollection where every element
            in the collection is of type: IUISimplePropertySet
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.SelectedItem">
            <summary>
            The index of the selected item in the SplitButtonGallery.
            If nothing is selected returns UI_Collection_InvalidIndex,
            which is a fancy way to say -1
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonSplitButtonGallery.CategoriesReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the Categories
            Now one can work with the Categories.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonSplitButtonGallery.ItemsSourceReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the ItemsSource
            Now one can work with the ItemsSource.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSplitButtonGallery.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonSplitButtonGallery.ExecuteEvent">
            <summary>
            Event provider similar to a "Selected Changed" event.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonSplitButtonGallery.PreviewEvent">
            <summary>
            Event provider for a preview.
            This is when the mouse enters the control.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonSplitButtonGallery.CancelPreviewEvent">
            <summary>
            Event provider when the preview is cancelled.
            This is when the mouse leaves the control.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonTab">
            <summary>
            Helper class that wraps a ribbon tab control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonTab.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon Tab
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTab.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTab.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTab.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonTab.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonComboBox">
            <summary>
            Helper class that wraps a ribbon combobox control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonComboBox.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon ComboBox
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.Categories">
            <summary>
            The list of categories. 
            Also exposed as an IUICollection of IUISimplePropertySet elements
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.ItemsSource">
            <summary>
            The list of ComboBox items.
            It is exposed as an IUICollection where every element
            in the collection is of type: IUISimplePropertySet
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.SelectedItem">
            <summary>
            The index of the selected item in the ComboBox.
            If nothing is selected returns UI_Collection_InvalidIndex,
            which is a fancy way to say -1
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonComboBox.CategoriesReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the Categories
            Now one can work with the Categories.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonComboBox.ItemsSourceReady">
            <summary>
            Event provider which only fired once.
            In this event you can initialize the ItemsSource
            Now one can work with the ItemsSource.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.StringValue">
            <summary>
            The current string in the ComboBox.
            This can be a string that isn't one of the possible items
            in the ComboBox, in case the ComboBox has IsEditable set to true.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.RepresentativeString">
             <summary>
             A string that represents the common value for the ComboBox.
             This is used to calculate the width of the ComboBox,
             so you should set here the longest string you forecast.
             Note that it doesn't have to be an actual value,
             it can be also: "XXXXXXXX".
            
             Note: Set it before Ribbon is initialized.
             </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonComboBox.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonComboBox.ExecuteEvent">
            <summary>
            Event provider similar to a "Selected Changed" event.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonComboBox.PreviewEvent">
            <summary>
            Event provider for a preview.
            This is when the mouse enters the control.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonComboBox.CancelPreviewEvent">
            <summary>
            Event provider when the preview is cancelled.
            This is when the mouse leaves the control.
            </summary>
        </member>
        <member name="T:RibbonLib.Controls.RibbonSpinner">
            <summary>
            Helper class that wraps a ribbon spinner control.
            </summary>
        </member>
        <member name="M:RibbonLib.Controls.RibbonSpinner.#ctor(RibbonLib.Ribbon,System.UInt32)">
            <summary>
            Initializes a new instance of the Ribbon Spinner
            </summary>
            <param name="ribbon">Parent Ribbon control</param>
            <param name="commandId">Command id attached to this control</param>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.DecimalValue">
            <summary>
            The actual decimal value of the spinner.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.Increment">
            <summary>
            The size of the step when pressing on increment / decrement buttons.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.MaxValue">
            <summary>
            Maximum value that can be set using the spinner control.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.MinValue">
            <summary>
            Minimum value that can be set using the spinner control.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.DecimalPlaces">
            <summary>
            The number of digits to show after the point.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.FormatString">
            <summary>
            The units of the value.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.RepresentativeString">
             <summary>
             A string that represents the common value for the Spinner.
             This is used to calculate the width of the Spinner,
             so you should set here the longest string you forecast.
             Note that it doesn't have to be an actual value,
             it can be also: "XXXXXXXX".
            
             Note: Set it before Ribbon is initialized.
             </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.Enabled">
            <summary>
            Get or set the Enabled state.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.Keytip">
            <summary>
            The keytip or key sequence that is used to access the command using the Alt key.
            This keytip appears when the user presses the Alt key to navigate the ribbon.
            The Ribbon Framework will automatically apply keytips to every command.
            However, if you want more control over the keytips used, you can specify them yourself.
            A keytip is not limited to a single character.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.Label">
            <summary>
            This is the label of the command as it will appear on the ribbon or context popups.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.LargeImage">
            <summary>
            Large images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.SmallImage">
            <summary>
            Small images
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.LargeHighContrastImage">
            <summary>
            Large images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.SmallHighContrastImage">
            <summary>
            Small images for use with high-contrast system settings
            For setting the Image, use method Ribbon.ConvertToUIImage(Bitmap)
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.TooltipTitle">
            <summary>
            The title of the tooltip (hint) that appear when the user hovers the mouse over the command.
            This title is displayed in bold at the top of the tooltip.
            </summary>
        </member>
        <member name="P:RibbonLib.Controls.RibbonSpinner.TooltipDescription">
            <summary>
            The description of the tooltip as it appears below the title.
            </summary>
        </member>
        <member name="E:RibbonLib.Controls.RibbonSpinner.ExecuteEvent">
            <summary>
            Event provider similar to a "Value Changed" event.
            </summary>
        </member>
        <member name="T:RibbonLib.HSL">
            <summary>
            Helper struct for Hue, Saturation, Luminance
            </summary>
        </member>
        <member name="T:RibbonLib.HSB">
            <summary>
            Helper struct for Hue, Saturation, Brightness
            </summary>
        </member>
        <member name="T:RibbonLib.ColorHelper">
            <summary>
            Class for color conversions
            </summary>
        </member>
        <member name="M:RibbonLib.ColorHelper.RGBToUInt32(System.Drawing.Color)">
            <summary>
            Convert RGB Color to Ribbon Color format
            </summary>
            <param name="color">RGB Color</param>
            <returns>Ribbon Color format</returns>
        </member>
        <member name="M:RibbonLib.ColorHelper.UInt32ToRGB(System.UInt32)">
            <summary>
            Convert Ribbon Color format to RGB Color
            </summary>
            <param name="value">Ribbon Color format</param>
            <returns>RGB Color</returns>
        </member>
        <member name="M:RibbonLib.ColorHelper.HSBToHSL(RibbonLib.HSB)">
            <summary>
            HSB to HSL conversion. All values of HSL in Range [0..1]
            </summary>
            <param name="hsb"></param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.EventLogger">
            <summary>
            Implementation of Com Interface IUIEventLogger
            </summary>
        </member>
        <member name="E:RibbonLib.EventLogger.LogEvent">
            <summary>
            Log Event
            </summary>
        </member>
        <member name="M:RibbonLib.EventLogger.Attach">
            <summary>
            Attach to an IUIEventLogger and IUIEventingManager objects events
            </summary>
        </member>
        <member name="M:RibbonLib.EventLogger.Detach">
            <summary>
            Detach the log events
            </summary>
        </member>
        <member name="M:RibbonLib.EventLogger.RibbonLib#Interop#IUIEventLogger#OnUIEvent(RibbonLib.Interop.EventParameters@)">
            <summary>
            Don't call it from user code
            </summary>
            <param name="pEventParams"></param>
        </member>
        <member name="T:RibbonLib.EventLoggerEventArgs">
            <summary>
            The EventArgs of EventLogger
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.EventType">
            <summary>
            Identifies the types of events associated with a Ribbon.
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.Modes">
            <summary>
            The application modes. Only used when a EventType ApplicationModeSwitched has been fired.
            In all other cases it is set to 0.
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.CommandID">
            <summary>
            The ID of the Command directly related to the event, which is specified in the markup resource file.
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.CommandName">
            <summary>
            The Command name that is associated with CommandId.
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.ParentCommandID">
            <summary>
            The ID for the parent of the Command, which is specified in the markup resource file.
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.ParentCommandName">
            <summary>
            The Command name of the parent that is associated with CommandId.
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.SelectionIndex">
            <summary>
            SelectionIndex is used only when a EventType CommandExecuted has been fired in response to the user selecting an item within a ComboBox or item gallery.
            In those cases, SelectionIndex contains the index of the selected item. In all other cases, it is set to 0.
            </summary>
        </member>
        <member name="P:RibbonLib.EventLoggerEventArgs.Location">
            <summary>
            Identifies the locations where events associated with a Ribbon control can originate.
            </summary>
        </member>
        <member name="T:RibbonLib.FontPropertyStore">
            <summary>
            Helper class that wraps an IPropertyStore interface that 
            contains font properties
            </summary>
        </member>
        <member name="M:RibbonLib.FontPropertyStore.#ctor(RibbonLib.Interop.IPropertyStore)">
            <summary>
            Initializes a new instance of the FontPropertyStore
            </summary>
            <param name="propertyStore"></param>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.Family">
            <summary>
            The selected font family name.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.Size">
            <summary>
            The size of the font.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.Bold">
            <summary>
            Flag that indicates whether bold is selected.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.Italic">
            <summary>
            Flag that indicates whether italic is selected.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.Underline">
            <summary>
            Flag that indicates whether underline is selected.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.Strikethrough">
            <summary>
            Flag that indicates whether strikethrough is selected
            (sometimes called Strikeout).
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.ForegroundColor">
            <summary>
            Contains the text color if ForegroundColorType is set to RGB.
            The FontControl helper class expose this property as a .NET Color
            and handles internally the conversion to and from COLORREF structure.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.ForegroundColorType">
            <summary>
            The text color type. Valid values are RGB and Automatic. 
            If RGB is selected, the user should get the color from the ForegroundColor property. 
            If Automatic is selected the user should use SystemColors.WindowText.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.DeltaSize">
            <summary>
            Indicated whether the "Grow Font" or "Shrink Font" buttons were pressed.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.BackgroundColor">
            <summary>
            Contains the background color if BackgroundColorType is set to RGB.
            The FontControl helper class expose this property as a .NET Color
            and handles internally the conversion to and from COLORREF structure.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.BackgroundColorType">
            <summary>
            The background color type. Valid values are RGB and NoColor. 
            If RGB is selected, the user should get the color from the BackgroundColor property.
            If NoColor is selected the user should use SystemColors.Window.
            </summary>
        </member>
        <member name="P:RibbonLib.FontPropertyStore.VerticalPositioning">
            <summary>
            Flag that indicates which one of the Subscript
            and Superscript buttons are selected, if any.
            </summary>
        </member>
        <member name="T:RibbonLib.GalleryCommandPropertySet">
            <summary>
            Helper class that wraps a gallery command simple property set.
            </summary>
        </member>
        <member name="P:RibbonLib.GalleryCommandPropertySet.CommandID">
            <summary>
            Get or set the Command ID
            </summary>
        </member>
        <member name="P:RibbonLib.GalleryCommandPropertySet.CommandType">
            <summary>
            Get or set the Command Type
            </summary>
        </member>
        <member name="P:RibbonLib.GalleryCommandPropertySet.CategoryID">
            <summary>
            Get or set the Category ID
            </summary>
        </member>
        <member name="M:RibbonLib.GalleryCommandPropertySet.GetValue(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariant@)">
            <summary>
            Retrieves the stored value of a given property
            </summary>
            <param name="key">The Property Key of interest.</param>
            <param name="value">When this method returns, contains a pointer to the value for key.</param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.GalleryItemPropertySet">
            <summary>
            Helper class that wraps a gallery item simple property set.
            </summary>
        </member>
        <member name="P:RibbonLib.GalleryItemPropertySet.Label">
            <summary>
            Get or set the label
            </summary>
        </member>
        <member name="P:RibbonLib.GalleryItemPropertySet.CategoryID">
            <summary>
            Get or set the Category ID
            </summary>
        </member>
        <member name="P:RibbonLib.GalleryItemPropertySet.ItemImage">
            <summary>
            Get or set the Item Image
            </summary>
        </member>
        <member name="M:RibbonLib.GalleryItemPropertySet.GetValue(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariant@)">
            <summary>
            Retrieves the stored value of a given property
            </summary>
            <param name="key">The Property Key of interest.</param>
            <param name="value">When this method returns, contains a pointer to the value for key.</param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.PropertyKey">
            <summary>
            Interop wrapper for native PropertyKey structure.
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKey.#ctor(System.Guid,System.UInt32)">
            <summary>
            Initializes a new instance of the PropertyKey
            </summary>
            <param name="fmtid"></param>
            <param name="pid"></param>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKey.op_Equality(RibbonLib.Interop.PropertyKey,RibbonLib.Interop.PropertyKey)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKey.op_Inequality(RibbonLib.Interop.PropertyKey,RibbonLib.Interop.PropertyKey)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKey.ToString">
            <summary>
            override ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKey.ToPointer">
            <summary>
            Return pinned memory to unmanaged code so that it doesn't get freed while unmanaged code still needs it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKey.Equals(System.Object)">
            <summary>
            override Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKey.GetHashCode">
            <summary>
            override GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="F:RibbonLib.Interop.PropertyKey.FormatId">
            <summary>
            
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.PropertyKey.PropertyId">
            <summary>
            
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.PropertyKeyRef">
            <summary>
            represent the struct PropertyKey as a reference-type
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.PropertyKeyRef.PropertyKey">
            <summary>
            The struct PropertyKey
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.PropertyKeyRef.From(RibbonLib.Interop.PropertyKey)">
            <summary>
            Convert the struct PropertyKey to a reference-type
            </summary>
            <param name="value"></param>
            <returns>The reference-type</returns>
        </member>
        <member name="T:RibbonLib.Interop.PropVariant">
            <summary>
            Represents the OLE struct PROPVARIANT.
            </summary>
            <remarks>
            Must call Clear when finished to avoid memory leaks. If you get the value of
            a VT_UNKNOWN prop, an implicit AddRef is called, thus your reference will
            be active even after the PropVariant struct is cleared.
            Correct usage:
            
                PropVariant propVar;
                GetProp(out propVar);
                try
                {
                    object value = propVar.Value;
                }
                finally { propVar.Clear(); }
                
            Originally sourced from http://blogs.msdn.com/adamroot/pages/interop-with-propvariants-in-net.aspx
            and modified to support R/W, and SafeArray vectors, decimal values, and other fixes.
            </remarks>
        </member>
        <member name="P:RibbonLib.Interop.PropVariant.Empty">
            <summary>
            An empty PropVariant
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.FromObject(System.Object)">
            <summary>
            Creates a PropVariant from an object
            </summary>
            <param name="value">The object containing the data.</param>
            <returns>An initialized PropVariant</returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.IsNull">
            <summary>
            only internal use
            </summary>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.Clear">
            <summary>
            Called to clear the PropVariant's referenced and local memory.
            </summary>
            <remarks>
            You must call Clear to avoid memory leaks.
            </remarks>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.Clone">
            <summary>
            Clone a PropVariant
            </summary>
            <returns>PropVariant</returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetUInt(System.UInt32)">
            <summary>
            Set an unsigned int value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetBool(System.Boolean)">
            <summary>
            Set a bool value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetDateTime(System.DateTime)">
            <summary>
            Set a DateTime value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetString(System.String)">
            <summary>
            Set a string value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetIUnknown(System.Object)">
            <summary>
            Set an IUnknown value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetSafeArray(System.Array)">
            <summary>
            Set a safe array value
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetByte(System.Byte)">
            <summary>
            Set a byte value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetSByte(System.SByte)">
            <summary>
            Set a sbyte value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetShort(System.Int16)">
            <summary>
            Set a short value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetUShort(System.UInt16)">
            <summary>
            Set an unsigned short value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetInt(System.Int32)">
            <summary>
            Set an int value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetUIntVector(System.UInt32[])">
            <summary>
            Set an uint vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetStringVector(System.String[])">
            <summary>
            Set a string vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetBoolVector(System.Boolean[])">
            <summary>
            Set a bool vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetShortVector(System.Int16[])">
            <summary>
            Set a short vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetUShortVector(System.UInt16[])">
            <summary>
            Set a short vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetIntVector(System.Int32[])">
            <summary>
            Set an int vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetLongVector(System.Int64[])">
            <summary>
            Set a long vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetULongVector(System.UInt64[])">
            <summary>
            Set a ulong vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetDoubleVector(System.Double[])">
            <summary>
            Set a double vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetDateTimeVector(System.DateTime[])">
            <summary>
            Set a DateTime vector
            </summary>
            <param name="array">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetDecimal(System.Decimal)">
            <summary>
            Set a decimal  value
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetLong(System.Int64)">
            <summary>
            Set a long
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetULong(System.UInt64)">
            <summary>
            Set a ulong
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.SetDouble(System.Double)">
            <summary>
            Set a double
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.op_Equality(RibbonLib.Interop.PropVariant,RibbonLib.Interop.PropVariant)">
            <summary>
            Not implemented
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.op_Inequality(RibbonLib.Interop.PropVariant,RibbonLib.Interop.PropVariant)">
            <summary>
            Not implemented
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.ToString">
            <summary>
            override ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.Equals(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.GetHashCode">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="P:RibbonLib.Interop.PropVariant.VarType">
            <summary>
            VarType
            </summary>
        </member>
        <member name="P:RibbonLib.Interop.PropVariant.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.GetDataBytes">
            <summary>
            Gets a byte array containing the data bits of the struct.
            </summary>
            <returns>A byte array that is the combined size of the data bits.</returns>
        </member>
        <member name="M:RibbonLib.Interop.PropVariant.CrackSingleDimSafeArray(System.IntPtr)">
            <summary>
            Marshals an unmanaged SafeArray to a managed Array object.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.PropVariantRef">
            <summary>
            represent the struct PropVariant as a reference-type
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.PropVariantRef.PropVariant">
            <summary>
            The struct PropVariant
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.PropVariantRef.From(RibbonLib.Interop.PropVariant)">
            <summary>
            Convert the struct PropVariant to a reference-type
            </summary>
            <param name="value"></param>
            <returns>The reference-type</returns>
        </member>
        <member name="T:RibbonLib.Interop.StreamAdapter">
            <summary>
            Helper class that wraps a .NET stream class as a COM IStream
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the StreamAdapter
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Not supported
            </summary>
            <param name="streamCopy"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.Commit(System.Int32)">
            <summary>
            Not supported
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Not supported
            </summary>
            <param name="targetStream"></param>
            <param name="bufferSize"></param>
            <param name="buffer"></param>
            <param name="bytesWrittenPtr"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Not supported
            </summary>
            <param name="offset"></param>
            <param name="byteCount"></param>
            <param name="lockType"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Write the Int32 value of the total number of bytes read into the buffer to bytesReadPtr
            </summary>
            <param name="buffer"></param>
            <param name="bufferSize"></param>
            <param name="bytesReadPtr"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.Revert">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>
            Write the new Int64 position of the stream to newPositionPtr
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <param name="newPositionPtr"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.SetSize(System.Int64)">
            <summary>
            Set the length for the stream
            </summary>
            <param name="libNewSize"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            
            </summary>
            <param name="streamStats"></param>
            <param name="grfStatFlag"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Not supported
            </summary>
            <param name="offset"></param>
            <param name="byteCount"></param>
            <param name="lockType"></param>
        </member>
        <member name="M:RibbonLib.Interop.StreamAdapter.Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Write Int32 value bufferSize to bytesWrittenPtr
            </summary>
            <param name="buffer"></param>
            <param name="bufferSize"></param>
            <param name="bytesWrittenPtr"></param>
        </member>
        <member name="T:RibbonLib.Interop.HRESULT">
            <summary>
            HRESULT Wrapper
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.RibbonIIDGuid">
            <summary>
            Guids of the interfaces and classes related to Windows Ribbon 
            Framework, based on UIRibbon.idl from windows 7 SDK
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.ContextAvailability">
            <summary>
            Specifies values that identify the availability
            of a contextual tab.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ContextAvailability.NotAvailable">
            <summary>
            A contextual tab is not available for the selected object.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ContextAvailability.Available">
            <summary>
            A contextual tab is available for the selected object.
            The tab is not the active tab.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ContextAvailability.Active">
            <summary>
            A contextual tab is available for the selected object.
            The tab is the active tab.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.FontProperties">
            <summary>
            Specifies values that identify the font property state
            of a FontControl, such as Strikethrough.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontProperties.NotAvailable">
            <summary>
            The property is not available.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontProperties.NotSet">
            <summary>
            The property is not set.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontProperties.Set">
            <summary>
            The property is set.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.FontVerticalPosition">
            <summary>
            Specifies values that identify the
            vertical-alignment state of a FontControl.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontVerticalPosition.NotAvailable">
            <summary>
            Vertical positioning is not enabled.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontVerticalPosition.NotSet">
            <summary>
            Vertical positioning is enabled but not toggled.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontVerticalPosition.SuperScript">
            <summary>
            Vertical positioning is enabled and toggled for superscript.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontVerticalPosition.SubScript">
            <summary>
            Vertical positioning is enabled and toggled for subscript.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.FontUnderline">
            <summary>
            Specifies values that identify the
            underline state of a FontControl.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontUnderline.NotAvailable">
            <summary>
            Underlining is not enabled.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontUnderline.NotSet">
            <summary>
            Underlining is off.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontUnderline.Set">
            <summary>
            Underlining is on.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.FontDeltaSize">
            <summary>
            Specifies values that identify whether
            the font size of a highlighted text run
            should be incremented or decremented.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontDeltaSize.Grow">
            <summary>
            Increment the font size.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.FontDeltaSize.Shrink">
            <summary>
            Decrement the font size.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.ControlDock">
            <summary>
            Specifies values that identify the dock state
            of the Quick Access Toolbar (QAT).
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ControlDock.Top">
            <summary>
            The QAT is docked in the nonclient area of the Ribbon host application.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ControlDock.Bottom">
            <summary>
            The QAT is docked as a visually integral band below the Ribbon,
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.SwatchColorType">
            <summary>
            Specifies the values that identify how a color swatch
            in a DropDownColorPicker or a FontControl color picker
            (Text color or Text highlight) is filled.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.SwatchColorType.NoColor">
            <summary>
            The swatch is transparent.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.SwatchColorType.Automatic">
            <summary>
            The swatch is filled with a solid RGB color
            bound to GetSysColor(COLOR_WINDOWTEXT).
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.SwatchColorType.RGB">
            <summary>
            The swatch is filled with a solid RGB color.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.SwatchColorMode">
            <summary>
            Specifies whether a swatch has normal or monochrome mode.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.SwatchColorMode.Normal">
            <summary>
            The swatch is normal mode.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.SwatchColorMode.Monochrome">
            <summary>
            The swatch is monochrome. The swatch's RGB color
            value will be interpreted as a 1 bit-per-pixel pattern.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.IUISimplePropertySet">
            <summary>
            Simple property bag
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUISimplePropertySet.GetValue(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariant@)">
            <summary>
            Retrieves the stored value of a given property
            </summary>
            <param name="key">The Property Key of interest.</param>
            <param name="value">When this method returns, contains a pointer to the value for key.</param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.IUIRibbon">
            <summary>
            Ribbon view interface
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIRibbon.GetHeight(System.UInt32@)">
            <summary>
            Returns the Ribbon height
            </summary>
            <param name="cy"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIRibbon.LoadSettingsFromStream(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>
            Load Ribbon parameters (e.g. QuickAccessToolbar) from a stream
            </summary>
            <param name="pStream"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIRibbon.SaveSettingsToStream(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>
            Save Ribbon parameters (e.g. QuickAccessToolbar) to a stream
            </summary>
            <param name="pStream"></param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.Invalidations">
            <summary>
            Specifies values that identify the aspect
            of a Command to invalidate.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Invalidations.State">
            <summary>
            A state property, such as UI_PKEY_Enabled.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Invalidations.Value">
            <summary>
            The value property of a Command.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Invalidations.Property">
            <summary>
            Any property.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Invalidations.AllProperties">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.IUIFramework">
            <summary>
            Windows Ribbon Application interface
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.Initialize(System.IntPtr,RibbonLib.Interop.IUIApplication)">
            <summary>
            Connects the framework and the application
            </summary>
            <param name="frameWnd"></param>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.Destroy">
            <summary>
            Releases all framework objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.LoadUI(System.IntPtr,System.String)">
            <summary>
            Loads and instantiates the views and commands specified in markup
            </summary>
            <param name="instance"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.GetView(System.UInt32,System.Guid@,System.Object@)">
            <summary>
            Retrieves a pointer to a view object
            </summary>
            <param name="viewID"></param>
            <param name="riid"></param>
            <param name="ppv"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.GetUICommandProperty(System.UInt32,RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariant@)">
            <summary>
            Retrieves the current value of a property
            </summary>
            <param name="commandID"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.SetUICommandProperty(System.UInt32,RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariant@)">
            <summary>
            Immediately sets the value of a property
            </summary>
            <param name="commandID"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.InvalidateUICommand(System.UInt32,RibbonLib.Interop.Invalidations,RibbonLib.Interop.PropertyKeyRef)">
            <summary>
            Asks the framework to retrieve the new value of a property at the next update cycle
            </summary>
            <param name="commandID"></param>
            <param name="flags"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.FlushPendingInvalidations">
            <summary>
            Flush all the pending UI command updates
            </summary>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIFramework.SetModes(System.Int32)">
            <summary>
            Asks the framework to switch to the list of modes specified and adjust visibility of controls accordingly
            </summary>
            <param name="iModes"></param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.IUIContextualUI">
            <summary>
            Windows Ribbon ContextualUI interface
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIContextualUI.ShowAtLocation(System.Int32,System.Int32)">
            <summary>
            Sets the desired anchor point where ContextualUI should be displayed.
            Typically this is the mouse location at the time of right click.
            x and y are in virtual screen coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.IUICollection">
            <summary>
            Windows Ribbon Collection interface
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUICollection.GetCount(System.UInt32@)">
            <summary>
            Retrieves the count of the collection
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUICollection.GetItem(System.UInt32,System.Object@)">
            <summary>
            Retrieves an item
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUICollection.Add(System.Object)">
            <summary>
            Adds an item to the end
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUICollection.Insert(System.UInt32,System.Object)">
            <summary>
            Inserts an item
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUICollection.RemoveAt(System.UInt32)">
            <summary>
            Removes an item at the specified position
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUICollection.Replace(System.UInt32,System.Object)">
            <summary>
            Replaces an item at the specified position
            </summary>
            <param name="indexReplaced"></param>
            <param name="itemReplaceWith"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUICollection.Clear">
            <summary>
            Clear the collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.CollectionChange">
            <summary>
            Specifies values that identify the types
            of changes that can be made to a collection.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CollectionChange.Insert">
            <summary>
            Insert an item into the collection.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CollectionChange.Remove">
            <summary>
            Delete an item from the collection.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CollectionChange.Replace">
            <summary>
            Replace an item in the collection.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CollectionChange.Reset">
            <summary>
            Delete all items from the collection.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.Constants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Constants.UI_Collection_InvalidIndex">
            <summary>
            Invalid index in UI_Collection
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Constants.UI_All_Commands">
            <summary>
            All commands value for IUIFramework
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.IUICollectionChangedEvent">
            <summary>
            Connection Sink for listening to collection changes
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUICollectionChangedEvent.OnChanged(RibbonLib.Interop.CollectionChange,System.UInt32,System.Object,System.UInt32,System.Object)">
            <summary>
            A collection has changed
            </summary>
            <param name="action"></param>
            <param name="oldIndex"></param>
            <param name="oldItem"></param>
            <param name="newIndex"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.ExecutionVerb">
            <summary>
            Specifies values that identify the execution IDs
            that map to actions a user can initiate on a Command.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ExecutionVerb.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ExecutionVerb.Preview">
            <summary>
            Preview
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ExecutionVerb.CancelPreview">
            <summary>
            Cancel preview
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.IUICommandHandler">
            <summary>
            Command handler interface
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUICommandHandler.Execute(System.UInt32,RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            User action callback, with transient execution parameters
            </summary>
            <param name="commandID">the command that has been executed</param>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUICommandHandler.UpdateProperty(System.UInt32,RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Informs of the current value of a property, and queries for the new one
            </summary>
            <param name="commandID">The ID for the Command, which is specified in the Markup resource file</param>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.CommandType">
            <summary>
            Specifies values that identify the type
            of Command associated with a Ribbon control.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Unknown">
            <summary>
            The type of command is not known.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Action">
            <summary>
            Action (Button, HelpButton)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Anchor">
            <summary>
            Anchor (ApplicationMenu, DropDownButton,
            SplitButton, Tab)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Context">
            <summary>
            Context (TabGroup)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Collection">
            <summary>
            Collection (ComboBox, DropDownGallery,
            InRibbonGallery, SplitButtonGallery)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Commandcollection">
            <summary>
            Command collection (DropDownGallery, InRibbonGallery,
            QuickAccessToolbar, SplitButtonGallery)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Decimal">
            <summary>
            Decimal (Spinner)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Boolean">
            <summary>
            Boolean (ToggleButton, CheckBox)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.Font">
            <summary>
            Font (FontControl)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.RecentItems">
            <summary>
            RecentItems
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.ColorAnchor">
            <summary>
            ColorAnchor (DropDownColorPicker)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.CommandType.ColorCollection">
            <summary>
            ColorCollection.
            This Command type is not supported by any framework controls.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.ViewType">
            <summary>
            Specifies values that identify the Ribbon framework View.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ViewType.Ribbon">
            <summary>
            A Ribbon View.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.ViewVerb">
            <summary>
            Specifies values that identify the type of action
            to complete on a Ribbon framework View.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ViewVerb.Create">
            <summary>
            Create a View.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ViewVerb.Destroy">
            <summary>
            Destroy a View.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ViewVerb.Size">
            <summary>
            Resize a View.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.ViewVerb.Error">
            <summary>
            Unable to complete the action.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.IUIApplication">
            <summary>
            Application callback interface
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIApplication.OnViewChanged(System.UInt32,RibbonLib.Interop.ViewType,System.Object,RibbonLib.Interop.ViewVerb,System.Int32)">
            <summary>
            A view has changed
            </summary>
            <param name="viewID"></param>
            <param name="typeID"></param>
            <param name="view"></param>
            <param name="verb"></param>
            <param name="uReasonCode"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIApplication.OnCreateUICommand(System.UInt32,RibbonLib.Interop.CommandType,RibbonLib.Interop.IUICommandHandler@)">
            <summary>
            Command creation callback
            </summary>
            <param name="commandID"></param>
            <param name="typeID"></param>
            <param name="commandHandler"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.Interop.IUIApplication.OnDestroyUICommand(System.UInt32,RibbonLib.Interop.CommandType,RibbonLib.Interop.IUICommandHandler)">
            <summary>
            Command destroy callback
            </summary>
            <param name="commandID"></param>
            <param name="typeID"></param>
            <param name="commandHandler"></param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.IUIImage">
            <summary>
            Container for a bitmap image
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIImage.GetBitmap(System.IntPtr@)">
            <summary>
            Retrieves a bitmap to display as an icon in the ribbon and context popup UI of the Windows Ribbon (Ribbon) framework.
            </summary>
            <param name="bitmap">Bitmap handle</param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:RibbonLib.Interop.Ownership">
            <summary>
            Ownership of HBITMAP
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Ownership.Transfer">
            <summary>
            The handle to the bitmap (HBITMAP) is owned by the
            Ribbon framework through the IUIImage object.
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.Ownership.Copy">
            <summary>
            A copy of the HBITMAP is created by the 
            Ribbon framework through the IUIImage object.
            The host application still owns the HBITMAP.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.IUIImageFromBitmap">
            <summary>
            Produces containers for bitmap images
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIImageFromBitmap.CreateImage(System.IntPtr,RibbonLib.Interop.Ownership,RibbonLib.Interop.IUIImage@)">
            <summary>
            Creates an IUIImage object from a bitmap image.
            </summary>
            <param name="bitmap"></param>
            <param name="options"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.EventType">
            <summary>
            Identifies the types of events associated with a Ribbon.
            UI_EVENTTYPE enum
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.ApplicationMenuOpened">
            <summary>
            The ApplicationMenu opened
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.RibbonMinimized">
            <summary>
            The Ribbon minimized
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.RibbonExpanded">
            <summary>
            The Ribbon expanded
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.ApplicationModeSwitched">
            <summary>
            The application mode changed
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.TabActivated">
            <summary>
            A Tab activated
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.MenuOpened">
            <summary>
            A menu opened
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.CommandExecuted">
            <summary>
            A Command executed
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventType.TooltipShown">
            <summary>
            A Command tooltip displayed.
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.EventLocation">
            <summary>
            Identifies the locations where events associated
            with a Ribbon control can originate.
            UI_EVENTLOCATION enum
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventLocation.Ribbon">
            <summary>
            The Ribbon
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventLocation.QAT">
            <summary>
            The QuickAccessToolbar
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventLocation.ApplicationMenu">
            <summary>
            The ApplicationMenu
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventLocation.ContextPopup">
            <summary>
            The ContextPopup
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.EventParametersCommand">
            <summary>
            Contains information about a Command associated with a event.
            Marshalling of strings can only be done in the wrapper class of interface IUIEventLogger
            UI_EVENTPARAMS_COMMAND struct
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParametersCommand.CommandID">
            <summary>
            The command Id
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParametersCommand.CommandName">
            <summary>
            The command name (not Marshaled)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParametersCommand.ParentCommandID">
            <summary>
            The parent command Id
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParametersCommand.ParentCommandName">
            <summary>
            The parent command name (not Marshaled)
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParametersCommand.SelectionIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParametersCommand.Location">
            <summary>
            The event location
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.EventParameters">
            <summary>
            Contains information about a Ribbon event.
            UI_EVENTPARAMS struct
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParameters.EventType">
            <summary>
            The event type
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParameters.Modes">
            <summary>
            Application modes
            </summary>
        </member>
        <member name="F:RibbonLib.Interop.EventParameters.Params">
            <summary>
            Event command parameters
            </summary>
        </member>
        <member name="T:RibbonLib.Interop.IUIEventLogger">
            <summary>
            The IUIEventLogger interface is implemented by the application
            and defines the ribbon events callback method.
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIEventLogger.OnUIEvent(RibbonLib.Interop.EventParameters@)">
            <summary>
            Receives notifications that a ribbon event has occurred.
            </summary>
            <param name="pEventParams">The parameters associated with the event. This value varies according to the event type.</param>
        </member>
        <member name="T:RibbonLib.Interop.IUIEventingManager">
            <summary>
            The IUIEventingManager interface is implemented by
            the Ribbon framework and provides the notification
            functionality for applications that register for ribbon events.
            Getting the interface is possible with the as operator
            from IUIFramework variable (Ribbon.Framework) after
            Framework.LoadUI(...)
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.IUIEventingManager.SetEventLogger(RibbonLib.Interop.IUIEventLogger)">
            <summary>
            Sets the event logger for ribbon events.
            </summary>
            <param name="eventLogger">The event logger. If null, disables event logging.</param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.Interop.RibbonProperties">
            <summary>
            Properties related to the Windows Ribbon Framework, based on 
            UIRibbon.idl from windows 7 SDK
            </summary>
        </member>
        <member name="M:RibbonLib.Interop.RibbonProperties.GetPropertyKeyName(RibbonLib.Interop.PropertyKey@)">
            <summary>
            Get the name of a given PropertyKey
            </summary>
            <param name="propertyKey">PropertyKey</param>
            <returns>Name of the PropertyKey</returns>
            <remarks>This function is used for debugging.</remarks>
        </member>
        <member name="T:RibbonLib.RecentItemsPropertySet">
            <summary>
            Helper class that wraps a recent items simple property set.
            </summary>
        </member>
        <member name="P:RibbonLib.RecentItemsPropertySet.Label">
            <summary>
            This is the label as it will appear on the ribbon.
            </summary>
        </member>
        <member name="P:RibbonLib.RecentItemsPropertySet.LabelDescription">
            <summary>
            A longer description. This description is used right side of the application menu
            </summary>
        </member>
        <member name="P:RibbonLib.RecentItemsPropertySet.Pinned">
            <summary>
            The pinned status
            </summary>
        </member>
        <member name="M:RibbonLib.RecentItemsPropertySet.GetValue(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariant@)">
            <summary>
            Retrieves the stored value of a given property
            </summary>
            <param name="key">The Property Key of interest.</param>
            <param name="value">When this method returns, contains a pointer to the value for key.</param>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.RibbonColors">
            <summary>
            Class for the Ribbon colors
            </summary>
        </member>
        <member name="P:RibbonLib.RibbonColors.BackgroundColor">
            <summary>
            The Background Color
            </summary>
        </member>
        <member name="P:RibbonLib.RibbonColors.HighlightColor">
            <summary>
            The Highlight Color
            </summary>
        </member>
        <member name="P:RibbonLib.RibbonColors.TextColor">
            <summary>
            The Text Color
            </summary>
        </member>
        <member name="T:RibbonLib.RibbonShortcut">
            <summary>
            Ribbon Shortcut class (can't used by a user,
            only used with the embedded xml resource file for shortcuts) 
            </summary>
        </member>
        <member name="P:RibbonLib.RibbonShortcut.CommandId">
            <summary>
            
            </summary>
        </member>
        <member name="P:RibbonLib.RibbonShortcut.Shortcut">
            <summary>
            
            </summary>
        </member>
        <member name="M:RibbonLib.RibbonShortcut.ConvertToKeys(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:RibbonLib.RibbonShortcut.ShortcutKeys">
            <summary>
            
            </summary>
        </member>
        <member name="T:RibbonLib.RibbonShortcutTable">
            <summary>
            Ribbon ShortcutTable class (can't used by a user,
            only used with the embedded xml resource file for shortcuts) 
            </summary>
        </member>
        <member name="P:RibbonLib.RibbonShortcutTable.RibbonShortcutArray">
            <summary>
            
            </summary>
        </member>
        <member name="P:RibbonLib.RibbonShortcutTable.RibbonShortcuts">
            <summary>
            
            </summary>
        </member>
        <member name="M:RibbonLib.RibbonShortcutTable.HitTest(System.Windows.Forms.Keys)">
            <summary>
            Tests if the shortcut has an underlying command id
            </summary>
            <param name="shortcutKeys">the shortcut keys</param>
            <returns>the command name</returns>
        </member>
        <member name="T:RibbonLib.UICollection">
            <summary>
            Helper class that provides an implementation of the 
            IUICollection interface.
            </summary>
        </member>
        <member name="M:RibbonLib.UICollection.GetCount(System.UInt32@)">
            <summary>
            Retrieves the count of the collection
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.UICollection.GetItem(System.UInt32,System.Object@)">
            <summary>
            Retrieves an item
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.UICollection.Add(System.Object)">
            <summary>
            Adds an item to the end
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.UICollection.Insert(System.UInt32,System.Object)">
            <summary>
            Inserts an item
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.UICollection.RemoveAt(System.UInt32)">
            <summary>
            Removes an item at the specified position
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.UICollection.Replace(System.UInt32,System.Object)">
            <summary>
            Replaces an item at the specified position
            </summary>
            <param name="indexReplaced"></param>
            <param name="itemReplaceWith"></param>
            <returns></returns>
        </member>
        <member name="M:RibbonLib.UICollection.Clear">
            <summary>
            Clear the collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:RibbonLib.UICollectionChangedEvent">
            <summary>
            Helper class that exposes an OnChanged event for a given 
            IUICollector instance.
            </summary>
        </member>
        <member name="M:RibbonLib.UICollectionChangedEvent.Attach(RibbonLib.Interop.IUICollection)">
            <summary>
            Attach to an IUICollection object events
            </summary>
            <param name="collection">IUICollection object</param>
        </member>
        <member name="M:RibbonLib.UICollectionChangedEvent.Detach">
            <summary>
            Detach from the previous IUICollection object events
            </summary>
        </member>
        <member name="E:RibbonLib.UICollectionChangedEvent.ChangedEvent">
            <summary>
            The Changed event
            </summary>
        </member>
        <member name="T:RibbonLib.IRibbonControl">
            <summary>
            Each ribbon control helper class should implement this
            interface according to the control's actions and properties.
            </summary>
        </member>
        <member name="P:RibbonLib.IRibbonControl.CommandID">
            <summary>
            Command id of the Ribbon control 
            </summary>
        </member>
        <member name="M:RibbonLib.IRibbonControl.Execute(RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Handles IUICommandHandler.Execute function for this ribbon control
            </summary>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="M:RibbonLib.IRibbonControl.UpdateProperty(RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Handles IUICommandHandler.UpdateProperty function for this ribbon control
            </summary>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="T:RibbonLib.Ribbon">
            <summary>
            Main class for using the windows ribbon in a .NET application
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.EventLogger">
            <summary>
            Get EventLogger object which implements IUIEventLogger.
            Only available in Windows 8, 10. Can be null.
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.ShortcutTableResourceName">
            <summary>
            is a reference to an embedded resource file
            in the application assembly. The (xml)-file contains
            shortcut keys.
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.#ctor">
            <summary>
            Initializes a new instance of the Ribbon
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.Dock">
            <summary>
            only Dock.Top possible
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.Text">
            <summary>
            Don't use
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.ResourceIdentifier">
            <summary>
            This is the Name parameter used for the UICC Compiler
            Default value is APPLICATION or leave it empty.
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.ResourceName">
            <summary>
            is a reference to an embedded resource file
            in the application assembly. The RibbonMarkup.ribbon file.
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.WindowHandle">
            <summary>
            Don't use
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws only in Design mode
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RibbonLib.Ribbon.Initalized">
            <summary>
            Check if ribbon framework has been initialized
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.Initialized">
            <summary>
            Check if ribbon framework has been initialized
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.Framework">
            <summary>
            Get ribbon framework object
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.GetLocalizedRibbon(System.String,System.Reflection.Assembly)">
            <summary>
            Embedded resource based Ribbon Dll
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.GetLocalizedRibbonFileData(System.String)">
            <summary>
            File based Ribbon Dll method
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.InitFramework(System.String,System.Reflection.Assembly)">
            <summary>
            Initalize ribbon framework
            </summary>
            <param name="ribbonResource">Name of ribbon dll</param>
            <param name="ribbonAssembly">Assembly where ribbon should reside</param>
        </member>
        <member name="M:RibbonLib.Ribbon.InitFramework(System.String,System.String)">
            <summary>
            Initalize ribbon framework
            </summary>
            <param name="resourceName">Identifier of the ribbon resource</param>
            <param name="ribbonDllName">Dll name where to find ribbon resource</param>
        </member>
        <member name="M:RibbonLib.Ribbon.InitFramework(System.String,System.IntPtr)">
            <summary>
            Initialize ribbon framework
            </summary>
            <param name="resourceName">Identifier of the ribbon resource</param>
            <param name="hInstance">Pointer to HINSTANCE of module where we can find ribbon resource</param>
        </member>
        <member name="M:RibbonLib.Ribbon.DestroyFramework">
            <summary>
            Destroy ribbon framework
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Change ribbon background, highlight and text colors
            </summary>
            <param name="background">new background color</param>
            <param name="highlight">new highlight color</param>
            <param name="text">new text color</param>
        </member>
        <member name="M:RibbonLib.Ribbon.SetBackgroundColor(System.Drawing.Color)">
            <summary>
            Change ribbon background color
            </summary>
            <param name="background">new background color</param>
        </member>
        <member name="M:RibbonLib.Ribbon.SetHighlightColor(System.Drawing.Color)">
            <summary>
            Change ribbon highlight color
            </summary>
            <param name="highlight">new highlight color</param>
        </member>
        <member name="M:RibbonLib.Ribbon.SetTextColor(System.Drawing.Color)">
            <summary>
            Change ribbon text color
            </summary>
            <param name="text">new text color</param>
        </member>
        <member name="M:RibbonLib.Ribbon.GetColors">
            <summary>
            Get the three Colors of the Ribbon
            </summary>
            <returns>Ribbon Colors class or null</returns>
        </member>
        <member name="M:RibbonLib.Ribbon.ConvertToUIImage(System.Drawing.Bitmap)">
            <summary>
            Wraps a bitmap object with IUIImage interface
            </summary>
            <param name="bitmap">bitmap object to wrap</param>
            <returns>IUIImage wrapper</returns>
        </member>
        <member name="M:RibbonLib.Ribbon.SetModes(System.Byte[])">
            <summary>
            Set current application modes
            </summary>
            <param name="modesArray">array of modes to set</param>
            <remarks>Unlisted modes will be unset</remarks>
        </member>
        <member name="M:RibbonLib.Ribbon.ShowContextPopup(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Shows a predefined context popup in a specific location
            </summary>
            <param name="contextPopupID">commandId for the context popup</param>
            <param name="x">X in screen coordinates</param>
            <param name="y">Y in screen coordinates</param>
        </member>
        <member name="P:RibbonLib.Ribbon.Minimized">
            <summary>
            Specifies whether the ribbon is in a collapsed or expanded state
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.Viewable">
            <summary>
            Specifies whether the ribbon user interface (UI) is in a visible or hidden state
            </summary>
        </member>
        <member name="P:RibbonLib.Ribbon.QuickAccessToolbarDock">
            <summary>
            Specifies whether the quick access toolbar is docked at the top or at the bottom
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.SaveSettingsToStream(System.IO.Stream)">
            <summary>
            The SaveSettingsToStream method is useful for persisting ribbon state, such as Quick Access Toolbar (QAT) items, across application instances.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:RibbonLib.Ribbon.LoadSettingsFromStream(System.IO.Stream)">
            <summary>
            The LoadSettingsFromStream method is useful for persisting ribbon state, such as Quick Access Toolbar (QAT) items, across application instances.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:RibbonLib.Ribbon.CreateRibbonFramework">
            <summary>
            Create ribbon framework object
            </summary>
            <returns>ribbon framework object</returns>
        </member>
        <member name="M:RibbonLib.Ribbon.CreateImageFromBitmapFactory">
            <summary>
            Create image-from-bitmap factory object
            </summary>
            <returns>image-from-bitmap factory object</returns>
        </member>
        <member name="M:RibbonLib.Ribbon.GenerateDefaultRibbonDllName">
            <summary>
            Generates a default ribbon dll name
            </summary>
            <returns>name of the dll</returns>
        </member>
        <member name="M:RibbonLib.Ribbon.AddRibbonControl(RibbonLib.IRibbonControl)">
            <summary>
            Adds a ribbon control to the internal map
            </summary>
            <param name="ribbonControl">ribbon control to add</param>
        </member>
        <member name="E:RibbonLib.Ribbon.RibbonEventException">
            <summary>
            User can handle untrapped Exceptions in the other events of the Ribbon
            </summary>
        </member>
        <member name="M:RibbonLib.Ribbon.Execute(System.UInt32,RibbonLib.Interop.ExecutionVerb,RibbonLib.Interop.PropertyKeyRef,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.IUISimplePropertySet)">
            <summary>
            Implementation of IUICommandHandler.Execute
            Responds to execute events on Commands bound to the Command handler
            </summary>
            <param name="commandID">the command that has been executed</param>
            <param name="verb">the mode of execution</param>
            <param name="key">the property that has changed</param>
            <param name="currentValue">the new value of the property that has changed</param>
            <param name="commandExecutionProperties">additional data for this execution</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
            <remarks>This method is used internally by the Ribbon class and should not be called by the user.</remarks>
        </member>
        <member name="M:RibbonLib.Ribbon.UpdateProperty(System.UInt32,RibbonLib.Interop.PropertyKey@,RibbonLib.Interop.PropVariantRef,RibbonLib.Interop.PropVariant@)">
            <summary>
            Implementation of IUICommandHandler.UpdateProperty
            Responds to property update requests from the Windows Ribbon (Ribbon) framework. 
            </summary>
            <param name="commandID">The ID for the Command, which is specified in the Markup resource file</param>
            <param name="key">The Property Key to update</param>
            <param name="currentValue">A pointer to the current value for key. This parameter can be null</param>
            <param name="newValue">When this method returns, contains a pointer to the new value for key</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
            <remarks>This method is used internally by the Ribbon class and should not be called by the user.</remarks>
        </member>
        <member name="E:RibbonLib.Ribbon.ViewCreated">
            <summary>
            Event fires when the View is created
            </summary>
        </member>
        <member name="E:RibbonLib.Ribbon.ViewDestroy">
            <summary>
            Event fires when the View is in destroy
            </summary>
        </member>
        <member name="E:RibbonLib.Ribbon.RibbonHeightChanged">
            <summary>
            Event fires when the Ribbon height changed
            </summary>
        </member>
        <member name="M:RibbonLib.RibbonUIApplication.#ctor(RibbonLib.Ribbon,RibbonLib.Ribbon)">
            <summary>
            RibbonUIApplication ctor
            </summary>
            <param name="ribbon">Ribbon</param>
            <param name="ribbonControl">Ribbon</param>
        </member>
        <member name="P:RibbonLib.RibbonUIApplication.UIRibbon">
            <summary>
            Reference to IUIRibbon object
            </summary>
        </member>
        <member name="M:RibbonLib.RibbonUIApplication.OnViewChanged(System.UInt32,RibbonLib.Interop.ViewType,System.Object,RibbonLib.Interop.ViewVerb,System.Int32)">
            <summary>
            Called when the state of a View changes
            </summary>
            <param name="viewId">The ID for the View. Only a value of 0 is valid.</param>
            <param name="typeID">The UI_VIEWTYPE hosted by the application.</param>
            <param name="view">A pointer to the View interface.</param>
            <param name="verb">The UI_VIEWVERB (or action) performed by the View.</param>
            <param name="uReasonCode">Not defined.</param>
            <returns>Returns S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="M:RibbonLib.RibbonUIApplication.OnCreateUICommand(System.UInt32,RibbonLib.Interop.CommandType,RibbonLib.Interop.IUICommandHandler@)">
            <summary>
            Called for each Command specified in the Windows Ribbon (Ribbon) framework markup to bind 
            the Command to an IUICommandHandler. 
            </summary>
            <param name="commandId">The ID for the Command, which is specified in the markup resource file.</param>
            <param name="typeID">The Command type that is associated with a specific control.</param>
            <param name="commandHandler">When this method returns, contains the address of a pointer to an
            IUICommandHandler object. This object is a host application Command handler that is bound to one or 
            more Commands.</param>
            <returns>Returns S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="M:RibbonLib.RibbonUIApplication.OnDestroyUICommand(System.UInt32,RibbonLib.Interop.CommandType,RibbonLib.Interop.IUICommandHandler)">
            <summary>
            Called for each Command specified in the Windows Ribbon (Ribbon) framework markup when the 
            application window is destroyed. 
            </summary>
            <param name="commandId">The ID for the Command, which is specified in the markup resource file.</param>
            <param name="typeID">The Command type that is associated with a specific control.</param>
            <param name="commandHandler">A pointer to an IUICommandHandler object. This value can be null.</param>
            <returns>Returns S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="T:RibbonLib.UICollectionChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:RibbonLib.UICollectionChangedEventArgs.#ctor(RibbonLib.Interop.CollectionChange,System.UInt32,System.Object,System.UInt32,System.Object)">
            <summary>
            EventArgs when UICollection changed
            </summary>
            <param name="action"></param>
            <param name="oldIndex"></param>
            <param name="oldItem"></param>
            <param name="newIndex"></param>
            <param name="newItem"></param>
        </member>
        <member name="P:RibbonLib.UICollectionChangedEventArgs.Action">
            <summary>
            Collection change action
            </summary>
        </member>
        <member name="P:RibbonLib.UICollectionChangedEventArgs.OldIndex">
            <summary>
            The old index
            </summary>
        </member>
        <member name="P:RibbonLib.UICollectionChangedEventArgs.OldItem">
            <summary>
            The old item
            </summary>
        </member>
        <member name="P:RibbonLib.UICollectionChangedEventArgs.NewIndex">
            <summary>
            The new Index
            </summary>
        </member>
        <member name="P:RibbonLib.UICollectionChangedEventArgs.NewItem">
            <summary>
            The new Item
            </summary>
        </member>
        <member name="F:RibbonLib.Util._designMode">
            <summary>
            Contains true, if we are in design mode of Visual Studio
            </summary>
        </member>
        <member name="M:RibbonLib.Util.#cctor">
            <summary>
            Initializes an instance of Util class
            </summary>
        </member>
        <member name="P:RibbonLib.Util.DesignMode">
            <summary>
            Gets true, if we are in design mode of Visual Studio
            </summary>
            <remarks>
            In Visual Studio 2008 SP1 the designer is crashing sometimes on windows forms. 
            The DesignMode property of Control class is buggy and cannot be used, so use our own implementation instead.
            </remarks>
        </member>
    </members>
</doc>
